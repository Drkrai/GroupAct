{"ast":null,"code":"(function ($) {\n  $.fn.countTo = function (options) {\n    options = options || {};\n    return $(this).each(function () {\n      // set options for current element\n      var settings = $.extend({}, $.fn.countTo.defaults, {\n        from: $(this).data(\"from\"),\n        to: $(this).data(\"to\"),\n        speed: $(this).data(\"speed\"),\n        refreshInterval: $(this).data(\"refresh-interval\"),\n        decimals: $(this).data(\"decimals\")\n      }, options);\n\n      // how many times to update the value, and how much to increment the value on each update\n      var loops = Math.ceil(settings.speed / settings.refreshInterval),\n        increment = (settings.to - settings.from) / loops;\n\n      // references & variables that will change with each update\n      var self = this,\n        $self = $(this),\n        loopCount = 0,\n        value = settings.from,\n        data = $self.data(\"countTo\") || {};\n      $self.data(\"countTo\", data);\n\n      // if an existing interval can be found, clear it first\n      if (data.interval) {\n        clearInterval(data.interval);\n      }\n      data.interval = setInterval(updateTimer, settings.refreshInterval);\n\n      // initialize the element with the starting value\n      render(value);\n      function updateTimer() {\n        value += increment;\n        loopCount++;\n        render(value);\n        if (typeof settings.onUpdate == \"function\") {\n          settings.onUpdate.call(self, value);\n        }\n        if (loopCount >= loops) {\n          // remove the interval\n          $self.removeData(\"countTo\");\n          clearInterval(data.interval);\n          value = settings.to;\n          if (typeof settings.onComplete == \"function\") {\n            settings.onComplete.call(self, value);\n          }\n        }\n      }\n      function render(value) {\n        var formattedValue = settings.formatter.call(self, value, settings);\n        $self.html(formattedValue);\n      }\n    });\n  };\n  $.fn.countTo.defaults = {\n    from: 0,\n    // the number the element should start at\n    to: 0,\n    // the number the element should end at\n    speed: 1000,\n    // how long it should take to count between the target numbers\n    refreshInterval: 100,\n    // how often the element should be updated\n    decimals: 0,\n    // the number of decimal places to show\n    formatter: formatter,\n    // handler for formatting the value before rendering\n    onUpdate: null,\n    // callback method for every time the element is updated\n    onComplete: null // callback method for when the element finishes updating\n  };\n\n  function formatter(value, settings) {\n    return value.toFixed(settings.decimals);\n  }\n})(jQuery);\njQuery(function ($) {\n  // custom formatting example\n  $(\".count-number\").data(\"countToOptions\", {\n    formatter: function (value, options) {\n      return value.toFixed(options.decimals).replace(/\\B(?=(?:\\d{3})+(?!\\d))/g, \",\");\n    }\n  });\n\n  // start all the timers\n  $(\".timer\").each(count);\n  function count(options) {\n    var $this = $(this);\n    options = $.extend({}, options || {}, $this.data(\"countToOptions\") || {});\n    $this.countTo(options);\n  }\n});","map":{"version":3,"names":["$","fn","countTo","options","each","settings","extend","defaults","from","data","to","speed","refreshInterval","decimals","loops","Math","ceil","increment","self","$self","loopCount","value","interval","clearInterval","setInterval","updateTimer","render","onUpdate","call","removeData","onComplete","formattedValue","formatter","html","toFixed","jQuery","replace","count","$this"],"sources":["C:/laragon/www/GroupAct/src/assets/assets/js/counter.js"],"sourcesContent":["(function ($) {\r\n    $.fn.countTo = function (options) {\r\n      options = options || {};\r\n  \r\n      return $(this).each(function () {\r\n        // set options for current element\r\n        var settings = $.extend(\r\n          {},\r\n          $.fn.countTo.defaults,\r\n          {\r\n            from: $(this).data(\"from\"),\r\n            to: $(this).data(\"to\"),\r\n            speed: $(this).data(\"speed\"),\r\n            refreshInterval: $(this).data(\"refresh-interval\"),\r\n            decimals: $(this).data(\"decimals\")\r\n          },\r\n          options\r\n        );\r\n  \r\n        // how many times to update the value, and how much to increment the value on each update\r\n        var loops = Math.ceil(settings.speed / settings.refreshInterval),\r\n          increment = (settings.to - settings.from) / loops;\r\n  \r\n        // references & variables that will change with each update\r\n        var self = this,\r\n          $self = $(this),\r\n          loopCount = 0,\r\n          value = settings.from,\r\n          data = $self.data(\"countTo\") || {};\r\n  \r\n        $self.data(\"countTo\", data);\r\n  \r\n        // if an existing interval can be found, clear it first\r\n        if (data.interval) {\r\n          clearInterval(data.interval);\r\n        }\r\n        data.interval = setInterval(updateTimer, settings.refreshInterval);\r\n  \r\n        // initialize the element with the starting value\r\n        render(value);\r\n  \r\n        function updateTimer() {\r\n          value += increment;\r\n          loopCount++;\r\n  \r\n          render(value);\r\n  \r\n          if (typeof settings.onUpdate == \"function\") {\r\n            settings.onUpdate.call(self, value);\r\n          }\r\n  \r\n          if (loopCount >= loops) {\r\n            // remove the interval\r\n            $self.removeData(\"countTo\");\r\n            clearInterval(data.interval);\r\n            value = settings.to;\r\n  \r\n            if (typeof settings.onComplete == \"function\") {\r\n              settings.onComplete.call(self, value);\r\n            }\r\n          }\r\n        }\r\n  \r\n        function render(value) {\r\n          var formattedValue = settings.formatter.call(self, value, settings);\r\n          $self.html(formattedValue);\r\n        }\r\n      });\r\n    };\r\n  \r\n    $.fn.countTo.defaults = {\r\n      from: 0, // the number the element should start at\r\n      to: 0, // the number the element should end at\r\n      speed: 1000, // how long it should take to count between the target numbers\r\n      refreshInterval: 100, // how often the element should be updated\r\n      decimals: 0, // the number of decimal places to show\r\n      formatter: formatter, // handler for formatting the value before rendering\r\n      onUpdate: null, // callback method for every time the element is updated\r\n      onComplete: null // callback method for when the element finishes updating\r\n    };\r\n  \r\n    function formatter(value, settings) {\r\n      return value.toFixed(settings.decimals);\r\n    }\r\n  })(jQuery);\r\n  \r\n  jQuery(function ($) {\r\n    // custom formatting example\r\n    $(\".count-number\").data(\"countToOptions\", {\r\n      formatter: function (value, options) {\r\n        return value\r\n          .toFixed(options.decimals)\r\n          .replace(/\\B(?=(?:\\d{3})+(?!\\d))/g, \",\");\r\n      }\r\n    });\r\n  \r\n    // start all the timers\r\n    $(\".timer\").each(count);\r\n  \r\n    function count(options) {\r\n      var $this = $(this);\r\n      options = $.extend({}, options || {}, $this.data(\"countToOptions\") || {});\r\n      $this.countTo(options);\r\n    }\r\n  });\r\n  "],"mappings":"AAAA,CAAC,UAAUA,CAAC,EAAE;EACVA,CAAC,CAACC,EAAE,CAACC,OAAO,GAAG,UAAUC,OAAO,EAAE;IAChCA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IAEvB,OAAOH,CAAC,CAAC,IAAI,CAAC,CAACI,IAAI,CAAC,YAAY;MAC9B;MACA,IAAIC,QAAQ,GAAGL,CAAC,CAACM,MAAM,CACrB,CAAC,CAAC,EACFN,CAAC,CAACC,EAAE,CAACC,OAAO,CAACK,QAAQ,EACrB;QACEC,IAAI,EAAER,CAAC,CAAC,IAAI,CAAC,CAACS,IAAI,CAAC,MAAM,CAAC;QAC1BC,EAAE,EAAEV,CAAC,CAAC,IAAI,CAAC,CAACS,IAAI,CAAC,IAAI,CAAC;QACtBE,KAAK,EAAEX,CAAC,CAAC,IAAI,CAAC,CAACS,IAAI,CAAC,OAAO,CAAC;QAC5BG,eAAe,EAAEZ,CAAC,CAAC,IAAI,CAAC,CAACS,IAAI,CAAC,kBAAkB,CAAC;QACjDI,QAAQ,EAAEb,CAAC,CAAC,IAAI,CAAC,CAACS,IAAI,CAAC,UAAU;MACnC,CAAC,EACDN,OACF,CAAC;;MAED;MACA,IAAIW,KAAK,GAAGC,IAAI,CAACC,IAAI,CAACX,QAAQ,CAACM,KAAK,GAAGN,QAAQ,CAACO,eAAe,CAAC;QAC9DK,SAAS,GAAG,CAACZ,QAAQ,CAACK,EAAE,GAAGL,QAAQ,CAACG,IAAI,IAAIM,KAAK;;MAEnD;MACA,IAAII,IAAI,GAAG,IAAI;QACbC,KAAK,GAAGnB,CAAC,CAAC,IAAI,CAAC;QACfoB,SAAS,GAAG,CAAC;QACbC,KAAK,GAAGhB,QAAQ,CAACG,IAAI;QACrBC,IAAI,GAAGU,KAAK,CAACV,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;MAEpCU,KAAK,CAACV,IAAI,CAAC,SAAS,EAAEA,IAAI,CAAC;;MAE3B;MACA,IAAIA,IAAI,CAACa,QAAQ,EAAE;QACjBC,aAAa,CAACd,IAAI,CAACa,QAAQ,CAAC;MAC9B;MACAb,IAAI,CAACa,QAAQ,GAAGE,WAAW,CAACC,WAAW,EAAEpB,QAAQ,CAACO,eAAe,CAAC;;MAElE;MACAc,MAAM,CAACL,KAAK,CAAC;MAEb,SAASI,WAAWA,CAAA,EAAG;QACrBJ,KAAK,IAAIJ,SAAS;QAClBG,SAAS,EAAE;QAEXM,MAAM,CAACL,KAAK,CAAC;QAEb,IAAI,OAAOhB,QAAQ,CAACsB,QAAQ,IAAI,UAAU,EAAE;UAC1CtB,QAAQ,CAACsB,QAAQ,CAACC,IAAI,CAACV,IAAI,EAAEG,KAAK,CAAC;QACrC;QAEA,IAAID,SAAS,IAAIN,KAAK,EAAE;UACtB;UACAK,KAAK,CAACU,UAAU,CAAC,SAAS,CAAC;UAC3BN,aAAa,CAACd,IAAI,CAACa,QAAQ,CAAC;UAC5BD,KAAK,GAAGhB,QAAQ,CAACK,EAAE;UAEnB,IAAI,OAAOL,QAAQ,CAACyB,UAAU,IAAI,UAAU,EAAE;YAC5CzB,QAAQ,CAACyB,UAAU,CAACF,IAAI,CAACV,IAAI,EAAEG,KAAK,CAAC;UACvC;QACF;MACF;MAEA,SAASK,MAAMA,CAACL,KAAK,EAAE;QACrB,IAAIU,cAAc,GAAG1B,QAAQ,CAAC2B,SAAS,CAACJ,IAAI,CAACV,IAAI,EAAEG,KAAK,EAAEhB,QAAQ,CAAC;QACnEc,KAAK,CAACc,IAAI,CAACF,cAAc,CAAC;MAC5B;IACF,CAAC,CAAC;EACJ,CAAC;EAED/B,CAAC,CAACC,EAAE,CAACC,OAAO,CAACK,QAAQ,GAAG;IACtBC,IAAI,EAAE,CAAC;IAAE;IACTE,EAAE,EAAE,CAAC;IAAE;IACPC,KAAK,EAAE,IAAI;IAAE;IACbC,eAAe,EAAE,GAAG;IAAE;IACtBC,QAAQ,EAAE,CAAC;IAAE;IACbmB,SAAS,EAAEA,SAAS;IAAE;IACtBL,QAAQ,EAAE,IAAI;IAAE;IAChBG,UAAU,EAAE,IAAI,CAAC;EACnB,CAAC;;EAED,SAASE,SAASA,CAACX,KAAK,EAAEhB,QAAQ,EAAE;IAClC,OAAOgB,KAAK,CAACa,OAAO,CAAC7B,QAAQ,CAACQ,QAAQ,CAAC;EACzC;AACF,CAAC,EAAEsB,MAAM,CAAC;AAEVA,MAAM,CAAC,UAAUnC,CAAC,EAAE;EAClB;EACAA,CAAC,CAAC,eAAe,CAAC,CAACS,IAAI,CAAC,gBAAgB,EAAE;IACxCuB,SAAS,EAAE,SAAAA,CAAUX,KAAK,EAAElB,OAAO,EAAE;MACnC,OAAOkB,KAAK,CACTa,OAAO,CAAC/B,OAAO,CAACU,QAAQ,CAAC,CACzBuB,OAAO,CAAC,yBAAyB,EAAE,GAAG,CAAC;IAC5C;EACF,CAAC,CAAC;;EAEF;EACApC,CAAC,CAAC,QAAQ,CAAC,CAACI,IAAI,CAACiC,KAAK,CAAC;EAEvB,SAASA,KAAKA,CAAClC,OAAO,EAAE;IACtB,IAAImC,KAAK,GAAGtC,CAAC,CAAC,IAAI,CAAC;IACnBG,OAAO,GAAGH,CAAC,CAACM,MAAM,CAAC,CAAC,CAAC,EAAEH,OAAO,IAAI,CAAC,CAAC,EAAEmC,KAAK,CAAC7B,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC;IACzE6B,KAAK,CAACpC,OAAO,CAACC,OAAO,CAAC;EACxB;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}